#!/usr/bin/env python

import sys
import pprint
import pymongo
import radical.utils       as ru
import radical.pilot       as rp
import radical.pilot.utils as rpu


_DEFAULT_DBURL = 'mongodb://localhost:27017/radicalpilot/'
_DEFAULT_DBURL = 'mongodb://ec2-184-72-89-141.compute-1.amazonaws.com:27017/radicalpilot/'

# for graphing events, we assign numerical pseudo values to each event.  
# Note: make sure that those are translated back into event tags via 'set # [xy]tics'
# 
#   set xtics ("lbl1" 1, "lbl2" 2, "lbl3" 3, "lbl4" 4)
#
_EVENT_ENCODING = {
        'session': {
            'created'                  :  1
        }, 
        'pmgr': {
        }, 
        'pilot' : {
            rp.PENDING_LAUNCH          :  1,
            rp.LAUNCHING               :  2,
            rp.PENDING_ACTIVE          :  3,
            rp.ACTIVE                  :  4,
            rp.DONE                    :  5,
            rp.CANCELED                :  6,
            rp.FAILED                  :  7
        },
        'umgr': {
        }, 
        'unit': {
            rp.NEW                     :  1,
            rp.PENDING_EXECUTION       :  2,
            rp.SCHEDULING              :  3,
            rp.PENDING_INPUT_TRANSFER  :  4,
            rp.TRANSFERRING_INPUT      :  5,
            rp.EXECUTING               :  6,
            rp.PENDING_OUTPUT_TRANSFER :  7,
            rp.TRANSFERRING_OUTPUT     :  8,
            rp.DONE                    :  9,
            rp.CANCELED                : 10,
            rp.FAILED                  : 11
        }
    }

# DONE                        
# CANCELED                    
# FAILED                      
# 
# # pilot states
# PENDING_LAUNCH              
# LAUNCHING                   
# PENDING_ACTIVE              
# ACTIVE                      
# 
# # ComputeUnit States
# NEW                         
# PENDING_INPUT_TRANSFER      
# TRANSFERRING_INPUT          
# 
# PENDING_EXECUTION           
# SCHEDULING                  
# EXECUTING                   
# 
# PENDING_OUTPUT_TRANSFER     
# TRANSFERRING_OUTPUT         


# ------------------------------------------------------------------------------
#
def usage (msg=None) :

    if  msg :
        print "\n\t%s\n" % msg

    print """

      usage   : %s -m mode [-d dburl] [-s session]
      example : %s -m stats -d mongodb://localhost/radicalpilot -s 536afe101d41c83696ea0135

      modes :

        help  : show this message
        list  : show  a  list   of sessions in the database
        tree  : show  a  tree   of session objects
        dump  : show  a  tree   of session objects, with full details
        sort  : show  a  list   of session objects, sorted by type
        hist  : show timeline   of session history
        stat  : show statistics of session history (not implemented)
        plot  : save gnuplot representing session history

      The default command is 'list'.  If no session ID is specified, operations
      which apply to a single session will choose the last session in the given
      DB.  The default MongoDB is '%s'
      
""" % (sys.argv[0], sys.argv[0], _DEFAULT_DBURL)

    if  msg :
        sys.exit (1)

    sys.exit (0)


# ------------------------------------------------------------------------------
#
def dump_session (dbclient, dbname, session) :

    if  not session :
        print "need session parameter on 'dump'"
        sys.exit (-1)

    print "session : %s" % session
    handle_session (dbclient, 'dump', dbname, session, None)


# ------------------------------------------------------------------------------
#
def tree_session (dbclient, dbname, session) :

    if  not session :
        print "need session parameter on 'tree'"
        sys.exit (-1)

    handle_session (dbclient, 'tree', dbname, session, None)


# ------------------------------------------------------------------------------
#
def list_sessions (dbclient, dbname, session) :

    if  session :
        print "invalid session parameter on 'list'"
        sys.exit (-1)

    sids = rpu.get_session_ids (dbclient, dbname)


    if not sids :
        print 'no session recorded in database at %s' % url

    else :
        print "Session IDs:"
        for sid in sids :
            print "  %s" % sid


# ------------------------------------------------------------------------------
def sort_session (dbclient, dbname, session) :

    if  not session :
        print "need session parameter on 'sort'"
        sys.exit (-1)

    docs = rpu.get_session_docs (dbclient, dbname, session)

    print "pilot managers :" 
    for doc in docs['pmgr'] :
        print "  %s" %  doc['_id']

    print "pilots :" 
    for doc in docs['pilots'] :
        print "  %s" %  doc['_id']

    print "unit manager"
    for doc in docs['umgr'] :
        print "  %s" %  doc['_id']

    print "units"
    for doc in docs['units'] :
        print "  %s" %  doc['_id']


# ------------------------------------------------------------------------------
def hist_session (dbclient, dbname, session) :

    if  not session :
        print "need session parameter on 'hist'"
        sys.exit (-1)

    events    = rpu.get_session_events   (dbclient, dbname, session)
    slothists = rpu.get_session_slothist (dbclient, dbname, session)

    if  not events :
        print "no events found for session %s" % session
        sys.exit (-1)

    if  not slothists :
        print "no slot configuration for session %s" % session
        print "Please update your pilot agent!"
        sys.exit (-1)

    start = events[0][3]

    # ascii output of time sorted events and slot history

    print "session : %s" % session
    print "          %s" % str(start)

    for e in events :
        seconds = ru.time_diff (start, e[3])
        print "          %08.2fs : %10s : %15s : %20s (%s)" % (seconds, e[1], e[2], e[4], e[0])

    for pilot_info in slothists :
        print "pilot   : %s" % pilot_info['pilot_id']
        for slothist in pilot_info['slothist'] :
            seconds = ru.time_diff (start, slothist['timestamp'])
            print "          %08.2fs : %s" % (seconds, str(slothist['slotstate']))


# ------------------------------------------------------------------------------
def plot_session (dbclient, dbname, session) :

    if  not session :
        print "need session parameter on 'plot'"
        sys.exit (-1)

    events    = rpu.get_session_events   (dbclient, dbname, session)
    slothists = rpu.get_session_slothist (dbclient, dbname, session)

    if  not events :
        print "no events found for session %s" % session
        sys.exit (-1)

    if  not slothists :
        print "no slot configuration for session %s" % session
        print "Please update your pilot agent!"
        sys.exit (-1)

    start = events[0][3]

    # create datafile for object lifelines (i.e. for graphs which show change
    # of object state over time), sorted by object type

    data = dict()

    for event in events :
        etype  = event[0]
        otype  = event[1]
        oid    = event[2]
        estamp = event[3]
        ename  = event[4]

        seconds = ru.time_diff (start, estamp)

        if  not otype in data :
            data[otype] = dict()

        if  not oid in data[otype] :
            data[otype][oid] = list()

        etag = 0 # unknown
        if  otype in _EVENT_ENCODING :
            if  ename in _EVENT_ENCODING[otype] :
                etag = _EVENT_ENCODING[otype][ename]

        # as the event list is time sorted, the resulting event lists for each
        # oid will be time sorted, too.
        data[otype][oid].append ([seconds, etag, etype])


    with open ("/tmp/%s.events.dat" % session, "w") as dat :

        dat.write ("\n")
        dat.write ("# %-12s  %25s  %10s  %10s  %10s  %6s\n\n" \
                % ('object type', 'object id', 'time', 'event', 'eventtype', 'color'))

        for otype in data :
            oidx = 0
            for oid in data[otype] :
                for event in data[otype][oid] :
                    dat.write ("%-14s  %25s  %10.2f  %6d  %10s  %6d\n" \
                            % (otype, oid, event[0], event[1], event[2], oidx))
                dat.write ("\n") # separate line segments
                oidx += 1


    # create datafile for slot allocations (i.e. for graphs which chow which
    # slots have been busy over time), sorted by pilot ID

    with open ("/tmp/%s.slots.dat" % session, "w") as dat :

        if  not len (slothists) :
            print "skip empty slot history"
            return

        dat.write ("\n")
        dat.write ("# %-12s  %25s  %10s  %6s  %6s\n" \
                % ('object type', 'object id', 'time', 'slot', 'color'))

        # [pilot_id, [ [hostname, slotnum] ], [ [slotstate, timestamp] ] ] 

        slotidxs_dict = dict()

        # find busy/free information for all hist entries
        for pilot_info in slothists :

            # if we did not see that pilot before, determine its slot idx list
            # from the slot info
            pilot_id = pilot_info['pilot_id']

            if not pilot_id in slotidxs_dict :

                slotidxs_dict[pilot_id] = list()
                slotstr                 = pilot_info['slothist'][0]['slotstate']

                for idx in range (0, len(slotstr)) :
                    if  slotstr[idx] in ['-', '+'] :
                        slotidxs_dict[pilot_id].append (idx)

            slotidxs = slotidxs_dict[pilot_id]

            dat.write ("\n")

            for number,slotidx in enumerate(slotidxs) :

                used     = False
                oid      = pilot_info['pilot_id']
                slothist = pilot_info['slothist']

                for entry in slothist :

                    seconds = ru.time_diff (start, entry['timestamp'])

                    slotstate = entry['slotstate'][slotidx]
                    if  slotstate == '-' : 
                        if  used :
                            dat.write ("%-14s  %25s  %10.2f  %6d  %6d\n" \
                                    % ('pilot', oid, seconds, number, number))
                            dat.write ("\n")
                            used    = False

                    elif  slotstate == '+' : 
                        dat.write ("%-14s  %25s  %10.2f  %6d  %6d\n" \
                                % ('pilot', oid, seconds, number, number))
                        used    = True

                    else :
                        print "oops?  invalid slotstate '%s'" % slotstate



# ------------------------------------------------------------------------------
def handle_session (dbclient, mode, dbname, session, pname) :
    """
    For the given db, traverse collections
    """

    database = dbclient[dbname]
    print " +-- db   %s" % dbname

    cnames = list()
    cnames.append ("%s"    % session)
    cnames.append ("%s.pm" % session)
    cnames.append ("%s.p"  % session)
    cnames.append ("%s.wm" % session)
    cnames.append ("%s.w"  % session)

    for name in cnames :

        if  mode == 'list' and not cname :
            print " | +-- coll %s" % name

        elif  mode == 'remove' and not pname :
            try :
                database.drop_collection (name)
                print "  removed collection %s" % name
            except :
                pass # ignore errors

        else :
            handle_coll (database, mode, name, pname)



# ------------------------------------------------------------------------------
def handle_coll (database, mode, cname, pname) :
    """
    For a given collection, traverse all documents
    """

    if 'indexes' in cname :
        return

    collection = database[cname]
    print " | +-- coll %s" % cname

    docs = collection.find ()

    for doc in docs :

        name = doc['_id']

        if  mode == 'list' and not pname :
            print " | | +-- doc  %s" % name

        elif  mode == 'remove' :
            if (not pname) or (str(name)==str(pname)) :
                try :
                    collection.remove (name)
                    print "  removed document %s" % name
                except Exception as e:
                    pass # ignore errors

        else :
            if (not pname) or (str(name)==str(pname)) :
                handle_doc (collection, mode, doc)


# ------------------------------------------------------------------------------
def handle_doc (collection, mode, doc) :
    """
    And, surprise, for a given document, show it according to 'mode'
    """

    name = doc['_id']

    if  mode == 'list' :

        for key in doc :
            print " | | | +-- %s" % (key)

    elif  mode == 'tree' :
        print " | | +-- doc  %s" % (name)
        for key in doc :
            print " | | | +-- %s" % (key)

    elif  mode == 'dump' :
        print " | | +-- doc  %s" % (name)
        for key in doc :
            txt_in  = pprint.pformat (doc[key])
            txt_out = ""
            lnum    = 1
            for line in txt_in.split ('\n') :
                if  lnum != 1 :
                    txt_out += ' | | | |                '
                txt_out += line
                txt_out += '\n'
                lnum    += 1

            print " | | | +-- %-10s : %s" % (key, txt_out[:-1]) # remove last \n
# ------------------------------------------------------------------------------
# 
def parse_commandline():

    return options


# ------------------------------------------------------------------------------
#
if __name__ == '__main__' :

    import optparse
    parser = optparse.OptionParser ()

    parser.add_option('-s', '--session', dest='session')
    parser.add_option('-d', '--dburl',   dest='url')
    parser.add_option('-m', '--mode',    dest='mode')

    options, args = parser.parse_args ()

    if  args :
        usage ("Too many arguments (%s)" % args)

    if  options.mode in ['help'] : 
        usage ()

    if  options.mode not in ['list', 'dump', 'tree', 'hist', 'sort', 'stat', 'plot'] : 
        usage ("Unsupported mode '%s'" % options.mode)

  # if  not options.session and options.mode not in ['list'] :
  #     usage ("mode '%s' needs session parameter" % options.mode)

    if  not options.url : 
        options.url = _DEFAULT_DBURL 


    mode    = options.mode 
    url     = options.url
    session = options.session

    [host, port, dbname, cname, pname] = ru.split_dburl (url, _DEFAULT_DBURL)
    dbclient = pymongo.MongoClient (host=host, port=port)

    print "url     : %s" % url
    print "mode    : %s" % mode

    if   mode == 'list' : list_sessions (dbclient, dbname, session)
    elif mode == 'tree' : tree_session  (dbclient, dbname, session) 
    elif mode == 'dump' : dump_session  (dbclient, dbname, session) 
    elif mode == 'sort' : sort_session  (dbclient, dbname, session) 
    elif mode == 'hist' : hist_session  (dbclient, dbname, session) 
    elif mode == 'stat' : stat_session  (dbclient, dbname, session) 
    elif mode == 'plot' : plot_session  (dbclient, dbname, session) 
    else                : usage ("unknown mode '%s'" % mode)

    # ------------------------------------------------------------------------------------
    dbclient.disconnect ()

# ------------------------------------------------------------------------------

