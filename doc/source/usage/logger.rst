
**************
Logging System
**************

In a distributed environment unified error logging and reporting is a crucial
capability for debugging and monitoring. Sinon has a configurable logging system
that  captures debug, info, warning and error messages across all of
its middelware adaptors. The logging system can be controlled in two different
ways: via :ref:`env_vars` variables, which should be sufficient in most 
scenarios, and via the :ref:`log_api`, which provides programmatic access to
the logging system for advanced use-cases.


.. _env_vars:

Environment Variables
---------------------

Several environment variables can be used to control Sinon's logging behavior from 
the command line. Obviously, this can come in handy when debugging a problem
with an existing Sinon application. Environment variables are set in the 
executing shell and evaluated by Sinon at program startup. 

.. envvar:: SINON_VERBOSE

   Controls the log level. This controls the amount of output generated by the
   logging system. ``SINON_VERBOSE`` expects either a numeric (0-4) value or a 
   string (case insensitive) representing the log level:

   +---------------+---------------------+------------------------------------+
   | Numeric Value | Log Level           | Type of Messages Displayed         |
   +===============+=====================+====================================+
   | 0             | ``CRITICAL``        | Only fatal events that will cause  |
   | (default)     |                     | Sinon to abort.                    | 
   |               |                     |                                    |
   +---------------+---------------------+------------------------------------+
   | 1             | ``ERROR``           | Errors that will not necessarily   |
   |               |                     | cause Sinon to abort.              | 
   |               |                     |                                    |
   +---------------+---------------------+------------------------------------+
   | 2             | ``WARNING``         | Warnings that are generated by     |
   |               |                     | Sinon and its middleware adaptors. | 
   |               |                     |                                    |
   +---------------+---------------------+------------------------------------+
   | 3             | ``INFO``            | Useful (?) runtime information     |   
   |               |                     | that is generated by Sinon and its | 
   |               |                     | middleware adaptors.               |
   +---------------+---------------------+------------------------------------+
   | 4             | ``DEBUG``           | Debug message added to the code    |
   |               |                     | by the developers. (Lots of output)| 
   |               |                     |                                    |
   +---------------+---------------------+------------------------------------+

   For example, if you want to see the debug messages that Sinon generates during 
   program execution, you would set :envvar:`SINON_VERBOSE` to ``DEBUG`` before 
   you run your program::

       SINON_VERBOSE=DEBUG python my_sinon_example.py


.. envvar:: SINON_LOG_FILTERS

   Controls the message sources displayed. Sinon uses a hierarchal structure for
   its log sources. Starting with the root logger ``sinon``, several sub loggers
   are defined for Sinon-internal logging events (e.g. ``sinon.pilot``) and
   individual plugins ``sinon.scheduler.default``.  ``SINON_LOG_FILTERS`` expects
   either a single source name or a comma-separated list of source names.
   Non-existing source names are ignored.

   For example, if you want to see only the debug messages generated by
   ``sinon.pilot``, you would set the following environment variables::

       SINON_VERBOSE=DEBUG SINON_LOG_FILTERS=sinon.pilot python my_sinon_example.py


.. envvar:: SINON_LOG_TARGETS

   Controls where the log messages go. Multiple concurrent locations are
   supported.  ``SINON_LOG_TARGETS`` expects either a single location or
   a comma-separated list of locations, where a location can either be
   a path/filename or the ``STDOUT`` keyword (case insensitive) for logging to
   the console. 

   For example, if you want to see debug messages on the console but also want
   to log them in a file for further analysis, you would set the the following
   environment variables::

       SINON_VERBOSE=DEBUG SINON_LOG_TARGETS=STDOUT,/tmp/sinon.log python my_sinon_example.py


.. _log_api:

Application Level Logging
-------------------------

The Sinon logging utilities are a thin wrapper around Python's logging
facilities.  To support the seamless integration of application level logging
needs, the :func:`sinon.utils.logger.getLogger` allows to produce additional
logger facilities, which are again native Python :class:`logging.Logger`
instances, but preconfigured according to the Sinon logging configuration.
Those instances can then be further customized as needed::

   from sinon.utils.logger import getLogger, INFO

   app_logger       = getLogger ('application.test')
   app_logger.level = INFO

   app_logger.info ('application level log message on INFO level')


.. automodule:: sinon.utils.logger
   :members:


